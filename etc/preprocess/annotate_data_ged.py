import re
import json
from tqdm import tqdm
from diff_match_patch import diff_match_patch

except_lst = [
    'Î∞ÄÎ©¥ „Ö†„Ö†„Ö†„Ö† Ïà† Ìï¥Ïû•ÏúºÎ°ú Î®πÎäî Î∞ÄÎ©¥, Ï∫¨.',
    'ÏïÑÎßàÏä§Îπà Î≤ÑÎ∏îÌã∞ÏóêÎßå ÏûàÎÇò Î≥¥ÎÑ§Ïöî. ÎßõÏûàÏùå. „Öé„Öé ÍµâÏû•Ìûà ÎßõÏûàÏùå. „Öé„Öé',
    'Îî∞Îî∞Îî∞ Îî∞ Îî∞ Îî∞Îî∞Îî∞. „Öã„Öã„Öã',
    'Ïù∏ÏÉùÎ∞•ÏßëÏù¥ 1Ìò∏Ï†êÏù¥Í≥† ÏòπÌè¨Î¶¨Í∞Ä Ïù∏ÏÉù Î∞•Ïßë 1Ìò∏Ï†êÏù¥ÏóêÏöî. „Öã„Öã„Öã„Öã',
    'Ï£Ω Î®πÏùÑÏßÄ Ï†úÏú°Î≥∂Ïùå Î®πÏùÑÏßÄ, Ìù†. ü§î',
    'Ìë∏ÏßêÌïòÎãà „Öã „Öã. Ïñº name1 Î™®Î•¥ÎÉê?',
    'ÏßëÏóê Î®∏ÌïÄ ÌãÄ ÏóÜÍ≥† ÌÉÄÎ•¥Ìä∏ ÌãÄ ÏºÄÏù¥ÌÅ¨ ÏõêÌòï(?)ÏùÄ ÏûàÎã§.',
    '„Öã„Öã Í∑∏Îü¨Í≤åÏöî. Ïò∑Ïù¥ Î¨∏Ï†úÏù∏ÏßÄ... Ï†úÍ∞Ä Î¨∏Ï†úÏù∏ÏßÄ... „Öã„Öã',
    '#ÏïÑÍ∏∞ÌôîÏû•Ìíà #ÏïÑÍ∏∞ÌÅ¨Î¶º #Ï≤úÏó∞ÏïÑÍ∏∞ÌôîÏû•Ìíà #Ï≤úÏó∞Î≤†Ïù¥ÎπÑÌÅ¨Î¶º #Ï†ÄÏûêÍ∑π ÏïÑÍ∏∞ ÌôîÏû•Ìíà.',
    'ÎØøÍ≥† Ïì∞Îäî #ÏïÑÎ≤§Îäê üòç',
    'Îã®Îã®Ìïú Í≤ÉÎì§Î°ú ÏßÄÌÉ±ÌïòÍ≥† ÏûàÎã§Í≥† ÎØøÍ≥† ÏûàÎäî ÏÇ∂. ÌïòÏßÄÎßå, Ïñ¥Ï©åÎ©¥! ÏßÑÏßú! ÏûëÍ∞ÄÍ∞Ä ÏçºÎçò Í≤ÉÏ≤òÎüº Ïö∞Î¶¨Ïùò ÏÇ∂ÏùÄ `Ìù∞ ` Î™®ÎûòÏôÄÎèÑ Í∞ôÏù¥ Î∂ÄÏä§Îü¨ÏßÄÍ≥† ÎÇ†ÏïÑÍ∞à Ïàò ÏûàÎäî Í∞ÄÎ≤ºÏö¥ Í≤å ÏïÑÎãêÍπå. '
    'Í≤∞Íµ≠ Ïö∞Î¶¨Îäî Î™®ÎûòÏùò ÏùºÎ∂ÄÍ∞Ä ÎêúÎã§. Ïù¥Îäî Î∂ÄÏù∏Ìï† Ïàò ÏóÜÎäî ÏÇ¨Ïã§Ïù¥Ïûê ÏßÑÎ¶¨Ïù¥Îã§. Í≤∞Íµ≠ Ïö∞Î¶¨Îäî Ìù¨Í≥† Í∞ÄÎ≤ºÏö¥ Í≤ÉÏù¥ ÎêòÍ≥† ÎßåÎã§. `Í∑∏Î¶¨Í≥† Í∑∏ÎÖÄÎäî ÏûêÏ£º ÏûäÏóàÎã§. '
    'ÏûêÏã†Ïùò Î™∏Ïù¥(Ïö∞Î¶¨ Î™®ÎëêÏùò Î™∏Ïù¥) Î™®ÎûòÏùò ÏßëÏù¥ÎûÄ Í±∏. '
    'Î∂ÄÏä§Îü¨Ï†∏ ÏôîÏúºÎ©∞ Î∂ÄÏä§Îü¨ÏßÄÍ≥† ÏûàÎã§Îäî Í±∏. '
    'ÎÅàÏßàÍ∏∞Í≤å ÏÜêÍ∞ÄÎùΩ ÏÇ¨Ïù¥Î°ú ÌùòÎü¨ÎÇ¥Î¶¨Í≥† ÏûàÎã§Îäî Í±∏.` „ÄåÎ™®Îûò„Äç Ï§ëÏóêÏÑú. `Ïó¨Îü¨ Ìï¥ Îí§ Í∑∏ ÏÉùÎ™Ö - Ïû¨ÏÉù - Î∂ÄÌôúÏùò ÍΩÉÎÇòÎ¨¥Îì§ ÏïÑÎûòÎ•º ÏßÄÎÇòÎã§ Í∑∏ÎÖÄÎäî ÏÉùÍ∞ÅÌñàÎã§. '
    'Í∑∏Îïå Ïôú Ïö∞Î¶¨Îäî ÌïòÌïÑ Î∞±Î™©Î†®ÏùÑ Í≥®ÎûêÏùÑÍπå. Ìù∞ ÍΩÉÏùÄ ÏÉùÎ™ÖÍ≥º Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎäî Í±∏Íπå, ÏïÑÎãàÎ©¥ Ï£ΩÏùåÍ≥º? '
    'Ïù∏ÎèÑ¬∑Ïú†ÎüΩÏñ¥ÏóêÏÑú ÌÖÖ ÎπîÍ≥º Ìù∞Îπõ, Í≤ÄÏùåÍ≥º Î∂àÍΩÉÏù¥ Î™®Îëê Í∞ôÏùÄ Ïñ¥ÏõêÏùÑ Í∞ñÎäîÎã§Í≥† Í∑∏ÎÖÄÎäî ÏùΩÏóàÎã§. '
    'Ïñ¥Îë†ÏùÑ ÏïàÍ≥† ÌÉÄÏò§Î•¥Îäî ÌÖÖ Îπà Ìù∞ Î∂àÍΩÉÎì§„Ö° Í∑∏Í≤ÉÏù¥ ÏÇºÏõîÏóê ÏßßÍ≤å ÍΩÉ ÌîºÎäî Î∞±Î™©Î†® Îëê Í∑∏Î£®Ïù∏ Í±∏Íπå? `„ÄåÎ∞±Î™©Î†®„Äç Ï§ëÏóêÏÑú.',
    '13ÎÖÑ ÏºÄÏù¥Îßò #Ïú†ÏïÑÎ¨ºÌã∞Ïäà ÏãúÏûëÏúºÎ°ú ÎßàÎçîÏºÄÏù¥ Ïú†ÏïÑ Î¨ºÌã∞Ïäà, ÎπÑÎç∞ Î¨ºÌã∞Ïäà, ÏºÄÏù¥ÎßòÏàúÌïúÏïÑÍ∏∞Î¨ºÌã∞Ïäà Îì±ÏùÑ Ï∂úÏãúÌïòÎ©¥ÏÑú‚Ä¶',
    '#Ïò¨Î¶ºÌîΩÍ≥µÏõê #ÎÇòÌôÄÎ°úÎÇòÎ¨¥ Îûë ÎÇò ÌôÄÎ°ú. ‚ù§üëçüèª',
    '#Ïó¨ÌñâÍ∞ÄÍ≥†Ïã∂Îã§ ÌòºÏûêÎùºÎèÑ... Í∞ÄÍ≥† Ïã∂Îã§.',
    'Îã¨Î†§Îùº Îã¨Î†§Îùº. [Î¨¥Î≥ëÏû•ÏàòÌï¥Î°ú üéé]',
    'Ìá¥Í∑º Ìá¥Í∑º Ìá¥Í∑º Ìá¥Í∑º Ìá¥Í∑ºÏãúÏºúÏ£ºÏÑ∏Ïöî. ‚Çç‚Çç ‚óù(`œâ`‚óù) ‚Åæ‚Åæ ‚Çç‚Çç (‚óü`œâ`)‚óü ‚Åæ‚Åæ',
    'Î∞ïÏÇ¨Îãò... Î∞ïÏÇ¨Îãò... (Ï∞°ÏñºÍ±∞Î¶¨Î©¥ÏÑú ÏÜêÏúºÎ°ú ÏûëÍ≤å Î¨∏ÏùÑ Ìà≠Ìà≠Í±∞Î¶∞Îã§.) Ïó¥Ïñ¥ Ï£ºÏÑ∏Ïöî, ÎÑ§?'
]



class ErrorAnnotation:
    def __init__(self):
        self.dmp = diff_match_patch()
        self.DIFF_DELETE = -1
        self.DIFF_INSERT = 1
        self.DIFF_EQUAL = 0

        self.n = 1
        self.annotation = ''
        self.error_label = None
        self.correct_label = None
        self.correction = ''

        self.en = 0
        self.cn = 0

        self.b_e_word = None
        self.b_c_word = None

    def annotate_label_idx(self, e_word, c_word, error, correct):
        if self.b_c_word is not None:
            if c_word in self.b_c_word:
                self.cn += self.b_c_word.index(c_word) + 1

            if e_word in self.b_e_word:
                self.en += self.b_e_word.index(e_word) + 1

        s_ei = error.find(e_word, self.en)
        e_ei = s_ei + len(e_word)
        s_ci = correct.find(c_word, self.cn)
        e_ci = s_ci + len(c_word)
        self.error_label[s_ei:e_ei] = ['E'] * len(e_word)
        self.correct_label[s_ci:e_ci] = ['C'] * len(c_word)

        self.cn = s_ci
        self.en = s_ei
        self.b_c_word = c_word
        self.b_e_word = e_word

    def annotate_error(self, correct, error):
        diff = self.dmp.diff_main(correct, error)
        self.dmp.diff_cleanupSemantic(diff)

        self.en = 0
        self.cn = 0
        self.b_c_word = None
        self.b_e_word = None

        self.annotation = [i for i in error]
        self.correction = []
        self.error_label = ['O'] * len(error)
        self.correct_label = ['O'] * len(correct)

        for idx, (op, data) in enumerate(diff):
            if op == self.DIFF_INSERT:
                if idx == len(diff) - 1:
                    # Ï∂îÍ∞Ä Ïò§Î•ò
                    # correct: "ÏòàÏ†ÑÏóê ÏûàÏóàÎã§." -> error: "ÏòàÏ†ÑÏóê ÏûàÏóàÎã§.."
                    if diff[idx - 1][0] == self.DIFF_EQUAL:
                        error_text = diff[idx - 1][1].split()[-1] + data
                        correct_text = diff[idx - 1][1].split()[-1]
                        self.annotate_label_idx(error_text, correct_text, error, correct)
                    elif diff[idx - 1][0] == self.DIFF_INSERT:
                        error_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + data
                        correct_text = diff[idx - 2][1].split()[-1]
                        self.annotate_label_idx(error_text, correct_text, error, correct)
                    # ÍµêÏ≤¥ Ïò§Î•ò
                    # correct: "ÌóàÏ§ÄÎèÑ Ïû¨ÎØ∏ÏûàÏóàÏñ¥" -> error: "ÌóàÏ§ÄÎèÑ Ïû¨ÎØ∏ÏûàÏóàÎçî"
                    # correct: "Î∞•ÏùÑ Î®πÎã§." -> error: "Î®πÎã§ Î∞•ÏùÑ"
                    else:
                        if len(diff) == 2:
                            error_text = data
                            correct_text = diff[idx - 1][1]
                            self.annotate_label_idx(error_text, correct_text, error, correct)
                        elif diff[idx - 2][1][-1] == ' ':
                            if diff[idx - 2][1] == ' ':
                                error_text = data
                                correct_text = diff[idx - 1][1]
                                self.annotate_label_idx(error_text, correct_text, error, correct)
                            else:
                                error_text = diff[idx - 2][1].split()[-1] + ' ' + data
                                correct_text = diff[idx - 2][1].split()[-1] + ' ' + diff[idx - 1][1]
                                self.annotate_label_idx(error_text, correct_text, error, correct)
                        else:
                            error_text = diff[idx - 2][1].split()[-1] + data
                            correct_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1]
                            self.annotate_label_idx(error_text, correct_text, error, correct)

            elif op == self.DIFF_DELETE:
                # ÏÇ≠Ï†ú Ïò§Î•ò
                # correct: "ÏòàÏ†ÑÏóê ÏûàÏóàÎã§." -> error: "ÏòàÏ†ÑÏóê ÏûàÏóàÎã§"
                if idx == len(diff) - 1:
                    if diff[idx - 1][0] == self.DIFF_EQUAL:
                        error_text = diff[idx - 1][1].split()[-1]
                        correct_text = diff[idx - 1][1].split()[-1] + data
                        self.annotate_label_idx(error_text, correct_text, error, correct)

            elif op == self.DIFF_EQUAL:
                if idx == 0:
                    continue

                if diff[idx-1][0] == self.DIFF_DELETE:
                    # ÎùÑÏñ¥Ïì∞Í∏∞ ÏÇ≠Ï†ú Ïò§Î•ò
                    if diff[idx-1][1] == ' ':
                        if idx - 2 >= 0:
                            if diff[idx - 2][1][-1] != ' ':
                                if data[0] == ' ':
                                    error_text = diff[idx - 2][1].split()[-1] + ' ' + data.split()[0]
                                    correct_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + ' ' + data.split()[0]
                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                elif diff[idx - 2][0] == self.DIFF_DELETE:
                                    error_text = diff[idx - 3][1].split()[-1] + data.split()[0]
                                    correct_text = diff[idx - 3][1].split()[-1] + diff[idx - 2][1] + diff[idx - 1][1] + data.split()[0]
                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                else:
                                    error_text = diff[idx - 2][1].split()[-1] + data.split()[0]
                                    correct_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + data.split()[0]
                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                            else:
                                error_text = diff[idx - 2][1].split()[-1] + ' ' + data.split()[0]
                                correct_text = diff[idx - 2][1].split()[-1] + ' ' + diff[idx - 1][1] + data.split()[0]
                                self.annotate_label_idx(error_text, correct_text, error, correct)
                        else:
                            error_text = data.split()[0]
                            correct_text = diff[idx - 1][1] + data.split()[0]
                            self.annotate_label_idx(error_text, correct_text, error, correct)
                    else:
                        if idx - 2 >= 0:
                            if diff[idx - 2][1][-1] != ' ':
                                # ÏÇ≠Ï†ú Ïò§Î•ò
                                # correct: "ÎÇòÎäî ÏòàÏ†ÑÏóê ÎØ∏Íµ≠ÏùÑ Í∞îÎã§." -> error: "ÎÇòÎäî ÏòàÏ†Ñ ÎØ∏Íµ≠ÏùÑ Í∞îÎã§."
                                # correct: "Ïû†Íπê! „Öã„Öã„Öã„Öã" -> error: "Ïû†Íπê „Öã„Öã„Öã„Öã"
                                if data[0] == ' ':
                                    error_text = diff[idx - 2][1].split()[-1] + ' '
                                    correct_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + ' '
                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                elif diff[idx - 1][1][-1] == ' ':
                                    error_text = diff[idx - 2][1].split()[-1] + data.split()[0]
                                    correct_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + data.split()[0]
                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                # ÏÇ≠Ï†ú Ïò§Î•ò
                                # correct: "ÎÇòÎäî ÌîÑÎûëÏä§Ïóê ÏûàÏóàÎã§." -> error: "ÎÇòÎäî ÌîÑÏä§Ïóê ÏûàÏóàÎã§."
                                else:
                                    error_text = diff[idx - 2][1].split()[-1] + data.split()[0]
                                    correct_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + data.split()[0]
                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                            else:
                                # ÏÇ≠Ï†ú Ïò§Î•ò
                                # correct: "ÏùºÏñ¥ÎÇ† Ïàò ÏûàÎã§." -> error: "ÏùºÏñ¥ÎÇ†  ÏûàÎã§."
                                # correct: "ÏùºÏñ¥ÎÇ† Ïàò ÏûàÏùÑÍπå?" -> error: "ÏùºÏñ¥ÎÇ† ÏûàÏùÑÍπå?"
                                if data[0] == ' ' or diff[idx - 1][1][-1] == ' ':
                                    if ' ' == diff[idx - 2][1]:
                                        error_text = ' '
                                        correct_text = ' ' + diff[idx - 1][1]
                                    else:
                                        error_text = diff[idx - 2][1].split()[-1] + ' '
                                        correct_text = diff[idx - 2][1].split()[-1] + ' ' + diff[idx - 1][1]
                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                # ÏÇ≠Ï†ú Ïò§Î•ò
                                # correct: "ÎÇòÎäî ÍπÄÌè¨ÏãúÏóêÏÑú ÏùºÌñàÎã§." -> error: "ÎÇòÎäî Ìè¨ÏãúÏóêÏÑú ÏùºÌñàÎã§."
                                else:
                                    error_text = data.split()[0]
                                    correct_text = diff[idx - 1][1] + data.split()[0]
                                    self.annotate_label_idx(error_text, correct_text, error, correct)

                        else:
                            # ÏÇ≠Ï†ú Ïò§Î•ò
                            # correct: "Ïù¥ Í∏∞ÏÑ∏ÎùºÎ©¥ Îî∞Îùº Ïû°ÏùÑ Ïàò ÏûàÍ≤†Ïñ¥." -> error: " Í∏∞ÏÑ∏ÎùºÎ©¥ Îî∞Îùº Ïû°ÏùÑ Ïàò ÏûàÍ≤†Ïñ¥."
                            if data[0] == ' ':
                                error_text = ' ' + data.split()[0]
                                correct_text = diff[idx - 1][1] + ' ' + data.split()[0]
                                self.annotate_label_idx(error_text, correct_text, error, correct)
                            # ÏÇ≠Ï†ú Ïò§Î•ò
                            # correct: "Ïù¥ Í∏∞ÏÑ∏ÎùºÎ©¥ Îî∞Îùº Ïû°ÏùÑ Ïàò ÏûàÍ≤†Ïñ¥." -> error: "Í∏∞ÏÑ∏ÎùºÎ©¥ Îî∞Îùº Ïû°ÏùÑ Ïàò ÏûàÍ≤†Ïñ¥."
                            elif diff[idx - 1][1][-1] == ' ':
                                error_text = data.split()[0]
                                correct_text = diff[idx - 1][1] + data.split()[0]
                                self.annotate_label_idx(error_text, correct_text, error, correct)
                            # ÏÇ≠Ï†ú Ïò§Î•ò
                            # correct: "ÏùÄÏùÄÌïú Îã¨Îπõ" -> error: "ÏùÄÌïú Îã¨Îπõ"
                            else:
                                error_text = data.split()[0]
                                correct_text = diff[idx - 1][1].split()[-1] + data.split()[0]
                                self.annotate_label_idx(error_text, correct_text, error, correct)

                elif diff[idx-1][0] == self.DIFF_INSERT:
                    # ÎùÑÏñ¥Ïì∞Í∏∞ Ï∂îÍ∞Ä Ïò§Î•ò
                    if diff[idx - 1][1] == ' ' and diff[idx - 1][0] == 0:
                        error_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + data.split()[0]
                        correct_text = diff[idx - 2][1].split()[-1] + data.split()[0]
                        self.annotate_label_idx(error_text, correct_text, error, correct)
                    else:
                        if idx - 2 >= 0:
                            if diff[idx - 2][0] == self.DIFF_EQUAL:
                                if diff[idx - 2][1][-1] != ' ':
                                    # Ï∂îÍ∞Ä Ïò§Î•ò
                                    # correct: "ÎÇòÎäî Ï∂ïÍµ¨Î•º Ï¶êÍ≤®Î¥ê." -> error: "ÎÇòÎäîÎäê Ï∂ïÍµ¨Î•º Ï¶êÍ≤®Î¥ê."
                                    # correct: "ÎÇòÎäî ÏïºÍµ¨Î•º Ï¶êÍ≤®Î¥ê." -> error: "ÎÇòÎäî ÏïºÍµ¨Î•ºÎ•¥  Ï¶êÍ≤®Î¥ê."
                                    if data[0] == ' ':
                                        error_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + ' '
                                        correct_text = diff[idx - 2][1].split()[-1] + ' '
                                        self.annotate_label_idx(error_text, correct_text, error, correct)
                                    elif diff[idx - 1][1][-1] == ' ':
                                        error_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + data.split()[0]
                                        correct_text = diff[idx - 2][1].split()[-1] + data.split()[0]
                                        self.annotate_label_idx(error_text, correct_text, error, correct)
                                    # Ï∂îÍ∞Ä Ïò§Î•ò
                                    # correct: "ÏòàÏ†ÑÏóê ÏûàÏóàÎã§." -> error: "ÏòàÏ†ÑÏóê ÏûàÏóàÏóàÎã§."
                                    else:
                                        error_text = diff[idx - 2][1].split()[-1] + diff[idx - 1][1] + data.split()[0]
                                        correct_text = diff[idx - 2][1].split()[-1] + data.split()[0]
                                        self.annotate_label_idx(error_text, correct_text, error, correct)
                                else:
                                    # Ï∂îÍ∞Ä Ïò§Î•ò
                                    # correct: "ÎÇòÎäî ÏïàÏñëÏóêÏÑú ÏùºÌïúÎã§." -> error: "ÎÇòÎäî ÏïàÏñëÏóêÏÑú ÏÑú ÏùºÌïúÎã§."
                                    if data[0] == ' ' or diff[idx - 1][1][-1] == ' ':
                                        error_text = diff[idx - 2][1].split()[-1] + ' ' + diff[idx - 1][1]
                                        correct_text = diff[idx - 2][1].split()[-1] + ' '
                                        self.annotate_label_idx(error_text, correct_text, error, correct)
                                    # Ï∂îÍ∞Ä Ïò§Î•ò
                                    # correct: "ÎÇòÎäî ÍπÄÌè¨ÏãúÏóêÏÑú ÏùºÌñàÎã§." -> error: "ÎÇòÎäî „Ñ±ÍπÄÌè¨ÏãúÏóêÏÑú ÏùºÌñàÎã§."
                                    else:
                                        error_text = diff[idx - 1][1] + data.split()[0]
                                        correct_text = data.split()[0]
                                        self.annotate_label_idx(error_text, correct_text, error, correct)
                                        # ÍµêÏ≤¥ Ïò§Î•ò
                                        # correct: "ÌïúÏãú ÏùºÎ∂Ñ" -> error: "ÌïòÎÇòÏãú ÏùºÎ∂Ñ"
                            elif diff[idx - 2][0] == self.DIFF_DELETE:
                                if idx - 3 >= 0:
                                    if diff[idx - 3][1][-1] != ' ':
                                        # ÍµêÏ≤¥ Ïò§Î•ò
                                        # correct: "Í∞ÄÎ•¥Ï≥ê Ï§ò" -> error: "Í∞ÄÎ•¥Ïºú Ï§ò"
                                        # correct: "ÎßûÏñ¥ÎßàÏ†ï „Ö†" -> error: "ÎßûÏïÑ, ÎßûÏïÑ. „Ö†"
                                        if data[0] == ' ':
                                            error_text = diff[idx - 3][1].split()[-1] + diff[idx - 1][1]
                                            correct_text = diff[idx - 3][1].split()[-1] + diff[idx - 2][1]
                                            self.annotate_label_idx(error_text, correct_text, error, correct)

                                        else:
                                            # ÍµêÏ≤¥ Ïò§Î•ò
                                            # correct: "Íµ≠ÎÇ¥ÏóêÏÑú Ïò®Ï≤ú(?) Í∞àÍπå ÏÉùÍ∞Å Ï§ëÏù¥Ïïº." -> error: "Íµ≠ÎÇ¥ÏóêÏÑú Ïò®Ï≤ú?Í∞àÍπå ÏÉùÍ∞ÅÏ§ëÏù¥Ïïº"
                                            if diff[idx - 2][1][-1] == ' ':
                                                if data[0] == ' ':
                                                    error_text = diff[idx - 3][1].split()[-1] + diff[idx - 1][1]
                                                    correct_text = diff[idx - 3][1].split()[-1] + diff[idx - 2][1]
                                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                                else:
                                                    error_text = diff[idx - 3][1].split()[-1] + diff[idx - 1][1] + \
                                                                 data.split()[0]
                                                    correct_text = diff[idx - 3][1].split()[-1] + diff[idx - 2][1] + \
                                                                   data.split()[0]
                                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                            # ÍµêÏ≤¥ Ïò§Î•ò
                                            # correct: "ÏùòÏûêÍ∞Ä Î∂ÄÏÖîÏ°åÎã§." -> error: "ÏùòÏûêÍ∞Ä Î∂ÄÏÖ®Îã§."
                                            else:
                                                if diff[idx - 2][1][0] == ' ':
                                                    error_text = diff[idx - 1][1] + data.split()[0]
                                                    correct_text = diff[idx - 2][1] + data.split()[0]
                                                    self.annotate_label_idx(error_text, correct_text, error, correct)
                                                else:
                                                    error_text = diff[idx - 3][1].split()[-1] + diff[idx - 1][
                                                        1] + data.split()[0]
                                                    correct_text = diff[idx - 3][1].split()[-1] + diff[idx - 2][
                                                        1] + data.split()[0]
                                                    self.annotate_label_idx(error_text, correct_text, error,
                                                                            correct)
                                    else:
                                        # ÍµêÏ≤¥ Ïò§Î•ò
                                        # correct: "Ïù¥Ï†ú Í≥ß Îì§Ïñ¥Í∞ÄÏïº Ìï¥" -> error: "Ïù¥Ï†ú Í≥∂ Îì§Ïñ¥Í∞ÄÏïº Ìï¥"
                                        if data[0] == ' ':
                                            error_text = diff[idx - 1][1] + ' ' + data.split()[0]
                                            correct_text = diff[idx - 2][1] + ' ' + data.split()[0]
                                            self.annotate_label_idx(error_text, correct_text, error, correct)
                                        # ÍµêÏ≤¥ Ïò§Î•ò
                                        # correct: "Ïù¥ Í∏∏Î°ú Í≥ßÏû• Í∞ÄÏïºÌïúÎã§." -> error: "Ïù¥ Í∏∏Î°ú Í≥∂Ïû• Í∞ÄÏïºÌïúÎã§."
                                        else:
                                            if diff[idx - 3][1] == ' ':
                                                error_text = diff[idx - 3][1] + diff[idx - 1][1] + data.split()[0]
                                                correct_text = diff[idx - 2][1] + data.split()[0]
                                                self.annotate_label_idx(error_text, correct_text, error, correct)
                                            elif diff[idx - 3][1][-1] == ' ':
                                                error_text = diff[idx - 3][1].split()[-1] + ' ' + diff[idx - 1][1] + \
                                                             data.split()[0]
                                                correct_text = diff[idx - 3][1].split()[-1] + ' ' + diff[idx - 2][1] + \
                                                               data.split()[0]
                                                self.annotate_label_idx(error_text, correct_text, error, correct)
                                            else:
                                                error_text = diff[idx - 3][1].split()[-1] + diff[idx - 1][1] + \
                                                             data.split()[0]
                                                correct_text = diff[idx - 3][1].split()[-1] + diff[idx - 2][1] + \
                                                               data.split()[0]
                                                self.annotate_label_idx(error_text, correct_text, error, correct)
                                else:
                                    # ÍµêÏ≤¥ Ïò§Î•ò
                                    # correct: "Í≥ß Í≤ΩÍ∏∞Í∞Ä ÏãúÏûëÌïúÎã§." -> error: "Í≥∂ Í≤ΩÍ∏∞Í∞Ä ÏãúÏûëÌïúÎã§."
                                    if data[0] == ' ':
                                        error_text = diff[idx - 1][1] + ' ' + data.split()[0]
                                        correct_text = diff[idx - 2][1] + ' ' + data.split()[0]
                                        self.annotate_label_idx(error_text, correct_text, error, correct)
                                    else:
                                        error_text = diff[idx - 1][1] + data.split()[0]
                                        correct_text = diff[idx - 2][1] + data.split()[0]
                                        self.annotate_label_idx(error_text, correct_text, error, correct)

                        else:
                            # Ï∂îÍ∞Ä Ïò§Î•ò
                            # correct: " 1. Ïó∞Íµ¨ Î™©Ï†Å" -> error: ". 1. Ïó∞Íµ¨ Î™©Ï†Å"
                            if data[0] == ' ':
                                error_text = diff[idx - 1][1] + ' ' + data.split()[0]
                                correct_text = ' ' + data.split()[0]
                                self.annotate_label_idx(error_text, correct_text, error, correct)
                            # Ï∂îÍ∞Ä Ïò§Î•ò
                            # correct: "ÏßÄÍ∏à Ïù¥ Í∏∞ÏÑ∏ÎùºÎ©¥" -> error: "„Öà ÏßÄÍ∏à Ïù¥ Í∏∞ÏÑ∏ÎùºÎ©¥"
                            elif diff[idx - 1][1][-1] == ' ':
                                error_text = diff[idx - 1][1] + data.split()[0]
                                correct_text = data.split()[0]
                                self.annotate_label_idx(error_text, correct_text, error, correct)
                            # Ï∂îÍ∞Ä Ïò§Î•ò
                            # correct: "ÏßÄÍ∏à Ïù¥ Í∏∞ÏÑ∏ÎùºÎ©¥" -> "„ÖàÏßÄÍ∏à Ïù¥ Í∏∞ÏÑ∏ÎùºÎ©¥"
                            else:
                                error_text = diff[idx - 1][1] + data.split()[0]
                                correct_text = data.split()[0]
                                self.annotate_label_idx(error_text, correct_text, error, correct)



        tmp_error_label = self.error_label.copy()
        pattern = re.compile(r'E+')
        e_flag = True
        tag_len = 0
        while e_flag:
            s_i, e_i = pattern.search(''.join(tmp_error_label)).span()
            e_word = error[s_i:e_i]
            self.annotation[s_i+tag_len:e_i+tag_len] = f'<S{self.n}>{e_word}</S{self.n}>'
            tag_len += len(f'<S{self.n}>') + len(f'</S{self.n}>')
            tmp_error_label[s_i:e_i] = ['O'] * (e_i-s_i)
            if e_i - s_i == 1:
                self.error_label[s_i:e_i] = ['B-E']
            elif e_i - s_i == 2:
                self.error_label[s_i:s_i + 1] = ['B-E']
                self.error_label[s_i + 1:e_i] = ['E-E']
            else:
                self.error_label[s_i:s_i + 1] = ['B-E']
                self.error_label[s_i + 1:e_i - 1] = ['I-E'] * (e_i - s_i - 2)
                self.error_label[e_i - 1:e_i] = ['E-E']

            self.n += 1
            if 'E' not in tmp_error_label:
                e_flag = False
                self.n = 1

        if len(error) != len(self.error_label):
            return [], []

        self.annotation = ''.join(self.annotation)

        pattern = re.compile(r'C+')
        c_flag = True
        while c_flag:
            s_i, e_i = pattern.search(''.join(self.correct_label)).span()
            s_word = correct[s_i:e_i]
            self.correction.append(f'{s_word}')
            self.correct_label[s_i:e_i] = ['O'] * (e_i - s_i)
            self.n += 1
            if 'C' not in self.correct_label:
                c_flag = False
                self.n = 1

        self.error_label = ' '.join(self.error_label)
        self.correction = '<sep>'.join(self.correction)
        return error, self.error_label


if __name__ == '__main__':
    input_path = 'original_dataset/sample.txt'
    with open(input_path, 'r', encoding='utf-8') as rf:
        lines = rf.readlines()

    annotation_tool = ErrorAnnotation()

    examples = []
    for line in tqdm(lines):
        line = line.strip()

        if '\t' in line:
            e, c = line.split('\t')
            e = e.replace('¬†', ' ')
            c = c.replace('¬†', ' ')
            e = e.replace('‚Äã', ' ')
            c = c.replace('‚Äã', ' ')

            flag = True
            while flag:
                e = e.replace('  ', ' ')
                c = c.replace('  ', ' ')
                if '  ' not in e and '  ' not in c:
                    flag = False

            e = e.strip(' ')
            c = c.strip(' ')

            if c in except_lst:
                continue

            if e == '' or c == '':
                continue

            if e == '``':
                continue

            if e == c:
                label = ' '.join(['O'] * len(e))
                examples.append({'error': e, 'tag': label})
                continue

            error, label  = annotation_tool.annotate_error(c, e)
            if not error:
                continue

            examples.append({'error': error, 'tag': label})

    with open('output_data/output_ged_sample.jsonl', 'w', encoding='utf-8') as wf:
        for example in examples:
            json.dump(example, wf, ensure_ascii=False)
            wf.write('\n')
